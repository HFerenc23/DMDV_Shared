#### Navigation & Basic Steps
pwd
  Print Working Directory

ls
  List Directory
cd
  Change Directory (basically move around)

mkdir 
  Make Directory

touch
  Create a file (no extension)

rm
  Remove file in wd

rmdir new_folder
	Remove Directory

##Edit files
nano /home/docker_learn/dockerfile_rstudio 
  edit a file
  to save press CTRL+X, then Y

############################################################
## Docker commands
docker ps -a
	Lists all containers, including the stopped and paused ones.

docker run
  Runs a Docker container.
  
  docker run -d -p 8787:8787 -e PASSWORD=au_dm_dv_student! --name rstudio -v rstudio_data:/home/rstudio rocker/rstudio

docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
  Executes commands in a running container.
  docker exec -it rstudio /bin/bash

docker rm [CONTAINER]
  Removes a stopped Docker container.

docker pull rocker/shiny
  Pulls an image from a Docker registry.

### Volume Management

docker volume create
  Creates a Docker shared volume.

docker volume ls
  Lists all Docker volumes.

docker volume inspect --format '{{ .Mountpoint }}' $(docker volume ls -q)
  Returns a list of shared volumes and their location on the host machine

docker save -o`
  Saves a Docker image to a tar archive.

  docker save -o rstudio_1_0_0.tar rstudio:1.0.0

docker load -i [PATH_TO_TAR_FILE]
  Loads a Docker image from a tar archive.

## Dockerfile Example for RStudio Setup
```Dockerfile
# Start from the rocker/rstudio base image which has R and RStudio pre-installed
FROM rocker/rstudio
# The RUN command executes shell commands during the image building process.
RUN apt-get update && apt-get install -y \
	git
# Install R packages using R's built-in 'install.packages' function.
RUN R -e 'install.packages(c("DBI", "RPostgres"))'
```

chmod o+rw [FILE_OR_DIRECTORY]
  Changes read and write permissions for 'other' users on a file or directory.

##Images
docker image ls #inspect current images
docker rmi [imageID] #remove image
docker image build --tag rstudio:1.0.0 -f dockerfile_rstudio . #build rstudio image

##RStudio as a container
docker run -d -p 8787:8787-e PASSWORD=Thisls4ThePassword -name rstudio -v rstudio_data:/home/rstudio rocker/rstudio
	docker run: start a container
	-d : run in detach mode (the container runs in the background and do not tie up your terminal)
	-p 8787:8787: The first 8787 is the host machine port, and the next 8787 is the port for the container. We map from the host machine port to the container port. Hence, when you access the host and specify that you connect to port 8787 (E.g.,"droplet_IP:8787") Docker will redirect traffic to the container.
	-e PASSWORD = [your_password]: Set the password for logging in to Rstudio
	--name rstudio:The name of the container
	-v rstudio_data:/home/rstudio: Mount the volume "rstudio_data" to the container path "/home/rstudio"
	rocker/rstudio: The name of the image that you use to install and run the docker container

##tar files
Not compressed, just bundled files

tar filename
  create a tar file

tar -xf filename
  extract a tar file

#Example
docker save -o rstudio_1_0_1.tar rstudio:1.0.1
docker rm -f rstudio
docker rmi rstudio:1.0.1
docker load -i rstudio_1_0_1.tar #May need to define the patzh
docker run -d --network db_r_shiny -p 8787:8787 -e PASSWORD=ThisIs4ThePassword --name rstudio -v rstudio_data:/home/rstudio rstudio:1.0.1

############################################################

#### Networks
docker network ls
  Bridge: Provides inter-container connectivity on the same machine
  Host: Containers connected to the host interact with the host network
  None: Containers connected to this does not have network connectivity outside themselves
  Local scope: The network is constrained to the host running Docke
  

##How to create a new network
docker network create -driver bridge -attachable --scope local --subnet 10.0.42.0/24 -ip-range 10.0.42.128/25 db_r_shiny
  docker network create: Command to build a new network
  -driver bridge: Using the bridge driver to create a bridge network
  -attachable: Allows us to attach and detach containers at any time
  -scope local: A network only available on the host
  -subnet I0.0.42.0124: Considers all IP-addresses from 10.0.42.0 to 10.0.42.255 as local
  -ip-range I0.0.42.128/25: Only allocate IP-addresses to new containers in the range from 10.0.42.128 to I0.0.42.255

##Run PostgreSQL container + connect to a network
docker run -p 5432:5432 --name postgres -e POSTGRES_PASSWORD=ThisIs4ThePassword -e POSTGRES_USER=postgres -d -v postgres_data:/var/lib/postgresql/data postgres
docker network connect db_r_shiny postgres
docker network inspect db_r_shiny

##Attach a container to the network
docker network connect db_r_shiny rstudio 
  Docker network connect: Command to connect a container to network 
  db_r_shiny: The network name
  rstudio: The container name
