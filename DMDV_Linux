#### Navigation & Basic Steps
# Print Working Directory
pwd

# List Directory
ls

# Change Directory (basically move around)
# Example: cd /home/scheduling
cd

# Make Directory
mkdir

# Create a file (no extension)
touch

# Remove file in working directory
rm

# Remove Directory
rmdir new_folder

#### Edit files
# Edit a file
# To save, press CTRL+X, then Y
nano /home/docker_learn/dockerfile_rstudio

############################################################
#### Docker commands
# Lists all containers, including the stopped and paused ones
docker ps -a

# Runs a Docker container
docker run

# Example: Run a Docker container
docker run -d -p 8787:8787 -e PASSWORD=au_dm_dv_student! --name rstudio -v rstudio_data:/home/rstudio rocker/rstudio

# Executes commands in a running container
docker exec [OPTIONS] CONTAINER COMMAND [ARG...]

# Example: Execute commands in a running container
docker exec -it rstudio /bin/bash

# Removes a stopped Docker container
docker rm [CONTAINER or CONTAINERID]

# Close all exited containers
docker container prune
# OR
docker rm $(docker ps -a -q -f status=exited) #but this deletes all exited!

# Pulls an image from a Docker registry
docker pull rocker/shiny

### Volume Management
# Creates a Docker shared volume
docker volume create

# Lists all Docker volumes
docker volume ls

# Returns a list of shared volumes and their location on the host machine
docker volume inspect --format '{{ .Mountpoint }}' $(docker volume ls -q)

# Saves a Docker image to a tar archive
docker save -o

# Example: Save a Docker image to a tar archive
docker save -o rstudio_1_0_0.tar rstudio:1.0.0

# Loads a Docker image from a tar archive
docker load -i [PATH_TO_TAR_FILE]

## Dockerfile Example for RStudio Setup
```Dockerfile
# Start from the rocker/rstudio base image which has R and RStudio pre-installed
FROM rocker/rstudio

# The RUN command executes shell commands during the image building process
RUN apt-get update && apt-get install -y git

# Install R packages using R's built-in 'install.packages' function
RUN R -e 'install.packages(c("DBI", "RPostgres"))'

# Changes read and write permissions for 'other' users on a file or directory
chmod o+rw [FILE_OR_DIRECTORY]

## Images
# Inspect current images
docker image ls

# Remove image
docker rmi [imageID]

# Build RStudio image
docker image build --tag rstudio:1.0.0 -f dockerfile_rstudio .

## RStudio as a container
# Start a container
docker run -d -p 8787:8787 -e PASSWORD=Thisls4ThePassword --name rstudio -v rstudio_data:/home/rstudio rocker/rstudio

# Explanation of docker run options
# docker run: start a container
# -d : run in detach mode (the container runs in the background and does not tie up your terminal)
# -p 8787:8787: The first 8787 is the host machine port, and the next 8787 is the port for the container. We map from the host machine port to the container port. Hence, when you access the host and specify that you connect to port 8787 (e.g., "droplet_IP:8787"), Docker will redirect traffic to the container.
# -e PASSWORD=[your_password]: Set the password for logging in to RStudio
# --name rstudio: The name of the container
# -v rstudio_data:/home/rstudio: Mount the volume "rstudio_data" to the container path "/home/rstudio"
# rocker/rstudio: The name of the image that you use to install and run the Docker container

## tar files
# Not compressed, just bundled files

# Create a tar file
tar filename

# Extract a tar file
tar -xf filename

# Example
docker save -o rstudio_1_0_1.tar rstudio:1.0.1
docker rm -f rstudio
docker rmi rstudio:1.0.1
docker load -i rstudio_1_0_1.tar
docker run -d --network db_r_shiny -p 8787:8787 -e PASSWORD=ThisIs4ThePassword --name rstudio -v rstudio_data:/home/rstudio rstudio:1.0.1

############################################################

#### Networks
# Lists all networks
docker network ls

# Explanation of network types
# Bridge: Provides inter-container connectivity on the same machine
# Host: Containers connected to the host interact with the host network
# None: Containers connected to this do not have network connectivity outside themselves
# Local scope: The network is constrained to the host running Docker

## How to create a new network
# Create a new network
docker network create -driver bridge -attachable --scope local --subnet 10.0.42.0/24 -ip-range 10.0.42.128/25 db_r_shiny

# Explanation of docker network create options
# -driver bridge: Using the bridge driver to create a bridge network
# -attachable: Allows us to attach and detach containers at any time
# -scope local: A network only available on the host
# -subnet 10.0.42.0/24: Considers all IP addresses from 10.0.42.0 to 10.0.42.255 as local
# -ip-range 10.0.42.128/25: Only allocate IP addresses to new containers in the range from 10.0.42.128 to 10.0.42.255

## Run PostgreSQL container + connect to a network
docker run -p 5432:5432 --name postgres -e POSTGRES_PASSWORD=ThisIs4ThePassword -e POSTGRES_USER=postgres -d -v postgres_data:/var/lib/postgresql/data postgres
docker network connect db_r_shiny postgres
docker network inspect db_r_shiny

## Attach a container to the network
# Connect a container to network
docker network connect db_r_shiny rstudio

# Explanation of docker network connect options
# db_r_shiny: The network name
# rstudio: The container name
