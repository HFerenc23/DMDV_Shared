-- W39 SQL Exercises
-- Return the first 10 rows of the Customer table (include all columns)
SELECT * 
FROM public.customer
LIMIT 10;

-- Return the distinct postal codes from the address table
SELECT DISTINCT postal_code
FROM public.address;

-- Return the title of the films (from the film table) with a length above 90m
SELECT DISTINCT title, length
FROM public.film
WHERE length > 90;

-- Return the title, length, and rental rate of all films which have a length below 90 minutes and a rental rate above 4 dollars.
SELECT title, length, rental_rate
FROM public.film f 
WHERE length < 90 AND rental_rate > 4;

-- Return the payment id, the payment date, and the amount (from the payment table) where the payment date falls in the interval [19 February 2007 at 7 p.m.; 20 February 2007 at 7 p.m.].
SELECT payment_id, payment_date, amount
FROM public.payment p 
WHERE payment_date BETWEEN 
    TIMESTAMP '2007-02-19 19:00:00' 
    AND 
    TIMESTAMP '2007-02-20 19:00:00';

-- You can use brackets, (), to nest logical operators. Make the same query as above but only return rows where the amount is above 7 dollars.
SELECT payment_id, payment_date, amount
FROM public.payment p 
WHERE (payment_date BETWEEN 
    TIMESTAMP '2007-02-19 19:00:00' 
    AND 
    TIMESTAMP '2007-02-20 19:00:00')
    AND 
    (amount > 7);

-- Make two queries that return the rental table. The first query returns the rows sorted with respect to the rental date column such that the first rental date is in the first row. The second query is similar to the first but returns the opposite sorting of the rental date column.
SELECT *
FROM public.rental r
ORDER BY rental_date; -- add DESC to flip the ordering

-- Explain in words what the following query does:
SELECT customer_id, amount, payment_id
FROM payment
ORDER BY customer_id, amount; -- first order by customer_id, then the amount in ascending order

-- Using the payment table: Write a query that gets the number of payments for each customer. The returned table should have the customer id and the number of payments as columns and only show the 10 rows which have the highest number of payments.
SELECT customer_id, COUNT(payment_id) AS number_of_payments
FROM public.payment p
GROUP BY customer_id
ORDER BY number_of_payments DESC
LIMIT 10;

-- Using the payment table: Write a query that gets the number of payments for each customer. The query should only return customer id where the number of payments is between 15 and 17. Use the <= and >= comparison operators in your query.
SELECT customer_id, COUNT(payment_id) AS number_of_payments
FROM public.payment p
GROUP BY customer_id
HAVING COUNT(payment_id) <= 17 AND COUNT(payment_id) >= 15
LIMIT 10;

-- Compute the average value of the amount column in the payment table.
SELECT AVG(amount) AS average_value_of_amount
FROM public.payment;

--Write a query that returns a table with a column that indicates whether a payment is
-- either ’At the average’, ’Above average’, ’Below average’, or if there is ’no data
-- available’
SELECT payment_id, 
    CASE 
        WHEN amount = (SELECT AVG(amount) FROM public.payment) THEN 'At the average'
        WHEN amount > (SELECT AVG(amount) FROM public.payment) THEN 'Above average'
        WHEN amount < (SELECT AVG(amount) FROM public.payment) THEN 'Below average'
        ELSE 'No data'
    END AS Amount_to_avg
FROM public.payment;

-- The query given below can be written shorter (and easier to read). Rewrite the
-- query below into a new and shorter query that returns the same result.
-- select sum(a.after_vat)
-- from (select amount*0.8 as after_vat from payment) as a;

SELECT SUM(amount*0.8) as after_vat
FROM public.payment p;

--The following query counts the number of distinct postal codes from the address table
-- select count(distinct postal_code)
-- from address;
-- write an alternative (and longer) query that returns the same output, but uses
-- aliases. This code should first get a table of distinct values of postal codes, and
-- secondly, use that table to count the number of rows. Use the previous exercise
-- as inspiration.

SELECT count(*) AS distinct_postal_codes -- counts the number OF ROWS IN the RESULT SET
FROM (									 -- subquery
	SELECT DISTINCT postal_code			 -- DISTINCT postal_codes FROM address
	FROM public.address a
	)
	AS distinct_postal_code_table;		 -- an alias to the subquery 


 -- Create your own table in one of your personal databases. This table should have
-- an autoincrementing id column, an integer column, a text column where each
-- cell can have a maximum of 200 characters, a numeric column that allows a
-- total 10 digits and 3 digits after the decimal point, a column that contains dates
-- and times, and a boolean column. After the table is created, insert two rows of
-- data. Run the insert statement two times and check that your id column increments
CREATE TABLE user38db.public.test_table2 (
	id serial PRIMARY KEY,
	integer_column integer,
	text_column varchar(200),
	numeric_column NUMERIC(10,3),
	datetime_column timestamp,
	boolean_column boolean
	);

INSERT INTO user38db.public.test_table2 (integer_column, text_column, numeric_column, datetime_column, boolean_column)
VALUES	(1,'lol',1234567.891,now(),TRUE),
		(2,'haha',2,'2000-06-14 15:45:00',FALSE);
